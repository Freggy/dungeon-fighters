package de.bergwerklabs.dungeonfighters.game.core;

import com.google.gson.JsonObject;
import de.bergwerklabs.dungeonfighters.game.core.arena.fubar.TileType;
import de.bergwerklabs.dungeonfighters.game.core.games.map.DungeonGameWrapper;
import de.bergwerklabs.framework.schematicservice.LabsSchematic;
import org.bukkit.util.Vector;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Created by Yannic Rieger on 30.05.2017.
 * <p>  </p>
 *
 * @author Yannic Rieger
 */
public class Dungeon {

    /**
     * Map containing all the modules.
     */
    public HashMap<TileType, List<LabsSchematic>> getModules() { return this.modules; }

    /**
     * Gets the list of available {@link DungeonGameWrapper}s.
     */
    public List<DungeonGameWrapper> getDungeonGames() { return this.dungeonGames; }

    /**
     * Gets the list of start point schematics for this dungeon.
     */
    public List<File> getStartPoints() { return this.startPoints; }

    /**
     * Gets the list of end point schematics for this dungeon.
     */
    public List<File> getEndPoints() { return this.endPoints; }

    /**
     * Dungeon generated by FUBAR.
     */
    public TileType[] getGrid() {
        return grid;
    }

    private HashMap<TileType, List<LabsSchematic>> modules = new HashMap<>();
    private List<DungeonGameWrapper> dungeonGames = new ArrayList<>();
    private List<File> startPoints;
    private List<File> endPoints;
    private TileType[] grid;


    /**
     * @param mapFolder Folder in which the  map specific schematics are located.
     */
    public Dungeon(File mapFolder, File gamesFolder, TileType[] grid) {
        //this.grid = grid;
        //this.loadMapTiles(mapFolder);
        this.loadGames(gamesFolder);
    }

    /**
     * Loads and assigns all the {@link LabsSchematic}s for the matching {@link TileType}.
     *
     * @param mapFolder Folder where the {@link LabsSchematic}s are located.
     */
    private void loadMapTiles(File mapFolder) {
        List<File> modules = Arrays.asList(mapFolder.listFiles());
        this.modules.put(TileType.STRAIGHT_HORIZONTAL, this.getSchematicList(modules, TileType.STRAIGHT_HORIZONTAL.name()));
        this.modules.put(TileType.STRAIGHT_VERTICAL,   this.getSchematicList(modules, TileType.STRAIGHT_VERTICAL.name()));
        this.modules.put(TileType.CROSS,               this.getSchematicList(modules, TileType.CROSS.name()));
        this.modules.put(TileType.CORNER_RIGHT_DOWN,   this.getSchematicList(modules, TileType.CORNER_RIGHT_DOWN.name()));
        this.modules.put(TileType.CORNER_LEFT_UP,      this.getSchematicList(modules, TileType.CORNER_LEFT_UP.name()));
        this.modules.put(TileType.CORNER_LEFT_DOWN,    this.getSchematicList(modules, TileType.CORNER_LEFT_DOWN.name()));
        this.modules.put(TileType.CORNER_RIGHT_UP,     this.getSchematicList(modules, TileType.CORNER_RIGHT_UP.name()));
        this.modules.put(TileType.T_DOWN,              this.getSchematicList(modules, "T_D"));
        this.modules.put(TileType.T_LEFT,              this.getSchematicList(modules, "T_L"));
        this.modules.put(TileType.T_RIGHT,             this.getSchematicList(modules, "T_R"));
        this.modules.put(TileType.T_UP,                this.getSchematicList(modules, "T_U"));
        this.modules.put(TileType.END_DOWN,            this.getSchematicList(modules, TileType.END_DOWN.name()));
        this.modules.put(TileType.END_UP,              this.getSchematicList(modules, TileType.END_UP.name()));
        this.modules.put(TileType.END_RIGHT,           this.getSchematicList(modules, TileType.END_RIGHT.name()));
        this.modules.put(TileType.END_LEFT,            this.getSchematicList(modules, TileType.END_LEFT.name()));
    }

    /**
     * Loads all the {@link DungeonGameWrapper}s.
     *
     * @param gamesFolder Folder where all the {@link DungeonGameWrapper} are contained.
     */
    private void loadGames(File gamesFolder) {
       // for (File gameFolder : gamesFolder.listFiles()) {
         //   dungeonGames.add(this.createGame(gameFolder));
        //}

        this.startPoints = Arrays.asList(new File(gamesFolder.getPath() + "/start_points").listFiles());
        this.endPoints =  Arrays.asList(new File(gamesFolder.getPath() + "/end_points").listFiles());
    }

    /**
     * Creates {@link DungeonGameWrapper} with all the needed files.
     *
     * @param gameFolder Folder where plugin jar and module folders are contained.
     * @return a {@link DungeonGameWrapper}
     */
    private DungeonGameWrapper createGame(File gameFolder) {
        List<LabsSchematic> modules = Arrays.stream(gameFolder.listFiles()).filter(File::isDirectory)
                                                .map(this::readModule)
                                                .collect(Collectors.toList());
        return new DungeonGameWrapper(new File(gameFolder.getPath() + gameFolder.getName() + ".jar"), modules);
    }

    /**
     * Creates a {@link LabsSchematic}. The folder structure that is required for this to work, look here.
     * {link to confluence}
     *
     * @param moduleFolder Folder where the files are contained.
     * @return a {@link LabsSchematic}
     */
    private LabsSchematic readModule(File moduleFolder) {
        List<File> list = Arrays.asList(moduleFolder.listFiles());
        File schem = list.stream().filter(file -> file.getName().endsWith(".schematic")).findFirst().get();
        return new LabsSchematic(schem);
    }

    /**
     * Deserializes a {@link Vector}.
     *
     * @param object {@link JsonObject} containing x, y and z coordinates.
     * @return a {@link Vector}
     */
    private Vector deserializeVector(JsonObject object) {
        return new Vector(object.get("x").getAsDouble(), object.get("y").getAsDouble(), object.get("z").getAsDouble());
    }

    /**
     * Gets the list of schematics based of the module type.
     *
     * @param modules Schematics as files
     * @param moduleType ModuleType
     * @return the list of schematics based of the module type.
     */
    private List<LabsSchematic> getSchematicList(List<File> modules, String moduleType) {
        return modules.stream().filter(file -> file.getName().endsWith(moduleType + ".schematic"))
                      .map(LabsSchematic::new)
                      .collect(Collectors.toList());
    }
}
