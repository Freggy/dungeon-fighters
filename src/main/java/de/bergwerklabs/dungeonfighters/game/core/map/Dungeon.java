package de.bergwerklabs.dungeonfighters.game.core.map;
import de.bergwerklabs.dungeonfighters.game.core.fubar.TileType;
import de.bergwerklabs.framework.schematicservice.LabsSchematic;

import java.io.File;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Created by Yannic Rieger on 30.05.2017.
 * <p>  </p>
 *
 * @author Yannic Rieger
 */
public class Dungeon {

    /**
     * Map containing all the modules.
     */
    public HashMap<TileType, List<LabsSchematic>> getModules() { return this.modules; }

    /**
     * Dungeon generated by FMGA.
     */
    public TileType[] getGrid() {
        return grid;
    }

    private HashMap<TileType, List<LabsSchematic>> modules = new HashMap<>();
    private TileType[] grid;

    /**
     * @param mapFolder Folder in which the  map specific schematics are located.
     */
    public Dungeon(File mapFolder, TileType[] grid) {
        this.grid = grid;
        List<File> modules = Arrays.asList(mapFolder.listFiles());
        this.modules.put(TileType.STRAIGHT_HORIZONTAL, this.getSchematicList(modules, TileType.STRAIGHT_HORIZONTAL.name()));
        this.modules.put(TileType.STRAIGHT_VERTICAL,   this.getSchematicList(modules, TileType.STRAIGHT_VERTICAL.name()));
        this.modules.put(TileType.CROSS,               this.getSchematicList(modules, TileType.CROSS.name()));
        this.modules.put(TileType.CORNER_RIGHT_DOWN,   this.getSchematicList(modules, TileType.CORNER_RIGHT_DOWN.name()));
        this.modules.put(TileType.CORNER_LEFT_UP,      this.getSchematicList(modules, TileType.CORNER_LEFT_UP.name()));
        this.modules.put(TileType.CORNER_LEFT_DOWN,    this.getSchematicList(modules, TileType.CORNER_LEFT_DOWN.name()));
        this.modules.put(TileType.CORNER_RIGHT_UP,     this.getSchematicList(modules, TileType.CORNER_RIGHT_UP.name()));
        this.modules.put(TileType.T_DOWN,              this.getSchematicList(modules, "T_D"));
        this.modules.put(TileType.T_LEFT,              this.getSchematicList(modules, "T_L"));
        this.modules.put(TileType.T_RIGHT,             this.getSchematicList(modules, "T_R"));
        this.modules.put(TileType.T_UP,                this.getSchematicList(modules, "T_U"));
        this.modules.put(TileType.END_DOWN,            this.getSchematicList(modules, TileType.END_DOWN.name()));
        this.modules.put(TileType.END_UP,              this.getSchematicList(modules, TileType.END_UP.name()));
        this.modules.put(TileType.END_RIGHT,           this.getSchematicList(modules, TileType.END_RIGHT.name()));
        this.modules.put(TileType.END_LEFT,            this.getSchematicList(modules, TileType.END_LEFT.name()));

        this.getModules().entrySet().stream().forEach(entry -> System.out.println(entry.getKey() + " -> " + entry.getValue().size() + " -> " + entry.getValue().get(0).getSchematicFile().getName()));
    }

    /**
     * Gets the list of schematics based of the module type.
     *
     * @param modules Schematics as files
     * @param moduleType ModuleType
     * @return the list of schematics based of the module type.
     */
    private List<LabsSchematic> getSchematicList(List<File> modules, String moduleType) {
        return modules.stream().filter(file -> file.getName().endsWith(moduleType + ".schematic"))
                      .map(LabsSchematic::new)
                      .collect(Collectors.toList());
    }
}
